// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SplitUp.Web.Data;

namespace SplitUp.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20181104162843_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountToPay");

                    b.Property<int>("CreditorId");

                    b.Property<int>("Status");

                    b.Property<int>("TransactionId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreditorId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Creditors");

                    b.HasData(
                        new { Id = 1, AmountToPay = 22.2, CreditorId = 2, Status = 0, TransactionId = 1, UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountPaid");

                    b.Property<string>("BillName");

                    b.Property<string>("Memo");

                    b.Property<int>("NoOfIndividuals");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new { Id = 1, AmountPaid = 44.4, BillName = "Walmart", Memo = " This is a demo Bill.", NoOfIndividuals = 2, PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), UserId = 2 }
                    );
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("Password");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Email = "bibesh.kc@selu.edu", FullName = "Bibesh KC", Gender = "M", Password = "bafal123", Token = "1aa07ae9-ca6b-49b7-8fdb-0b5eb14ca500" },
                        new { Id = 2, Email = "pratikshya.timalsina@selu.edu", FullName = "Pratikshya Timalsina", Gender = "F", Password = "dallu123", Token = "accde4d4-4c64-4740-86c6-a97846dfa89b" }
                    );
                });

            modelBuilder.Entity("Credit", b =>
                {
                    b.HasOne("User", "Creditor")
                        .WithMany("Creditors")
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Transaction", "Transaction")
                        .WithMany("Creditors")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
